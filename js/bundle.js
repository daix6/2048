!function t(e,n,r){function i(s,u){if(!n[s]){if(!e[s]){var a="function"==typeof require&&require;if(!u&&a)return a(s,!0);if(o)return o(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var f=n[s]={exports:{}};e[s][0].call(f.exports,function(t){var n=e[s][1][t];return i(n?n:t)},f,f.exports,t,e,n,r)}return n[s].exports}for(var o="function"==typeof require&&require,s=0;s<r.length;s++)i(r[s]);return i}({1:[function(t,e,n){!function(){"use strict";var e=t("./grid.js"),n=t("./game.js"),r=new n(e);r.init()}()},{"./game.js":2,"./grid.js":3}],2:[function(t,e,n){e.exports=function(){"use strict";function e(t){this.grid=new t}var n=t("./util");return e.prototype.init=function(){this.grid.createPawn(),n.addEvent(document,"keydown",this.move)},e.prototype.move=function(){},e}()},{"./util":5}],3:[function(t,e,n){e.exports=function(){"use strict";function e(){this.x=4,this.y=4,this.nodes={0:[],1:[],2:[],3:[]}}var n=t("./pawn.js");return e.prototype.isValid=function(t,e){return t<this.x&&t>=0&&e<this.y&&e>=0},e.prototype.isOccupied=function(t,e){for(var n=0,r=this.nodes[t].length;r>n;n++)if(this.nodes[t][n].x===t&&this.nodes[t][n].y===e)return!0;return!1},e.prototype.createPawn=function(){for(var t=Math.floor(4*Math.random()),e=Math.floor(4*Math.random());this.isOccupied(t,e);)t=Math.floor(4*Math.random()),e=Math.floor(4*Math.random());var r=1===Math.floor(2*Math.random())?4:2,i=new n(t,e,r,this);this.nodes[t].push(i),this.render()},e.prototype.render=function(){var t=document.getElementsByClassName("numbers")[0];for(var e in this.nodes)for(var n=0,r=this.nodes[e].length;r>n;n++){var i=this.nodes[e][n],o=document.createElement("div");o.setAttribute("class","p-"+i.x+"-"+i.y+" c-"+i.value),o.textContent?o.textContent=i.value:o.innerText=i.value,t.appendChild(o)}},e}()},{"./pawn.js":4}],4:[function(t,e,n){e.exports=function(){"use strict";function t(t,e,n,r){this.x=t,this.y=e,this.value=n,this.grid=r}return t.prototype.getGrid=function(){return this.grid},t.prototype.getDest=function(t){var e,n;if(0===t)e=-1,n=0;else if(1===t)e=0,n=-1;else if(2===t)e=1,n=0;else{if(3!==t)return;e=0,n=-1}},t}()},{}],5:[function(t,e,n){e.exports=function(){"use strict";function t(t,e,n){t.addEventListener?t.addEventListener(e,n,!1):t.attachEvent&&t.attachEvent("on"+e,n)}function e(t){return t.getAttribute&&t.getAttribute("class")||""}function n(t,n){return e(t).indexOf(n)>-1?!0:!1}function r(t,r){if(!n(t,r)){var i=" "+e(t)+" ";i+=r+" ",t.setAttribute("class",i.trim())}}function i(t,r){if(n(t,r)){var i=new RegExp("(\\s|^)"+r+"(\\s|$)","g");t.setAttribute("class",e(t).replace(i," ").trim())}}return{addEvent:t,hasClass:n,addClass:r,removeClass:i}}()},{}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,